diff --git a/e01_strings/strings.cpp b/e01_strings/strings.cpp
index 716f444..23468f0 100644
--- a/e01_strings/strings.cpp
+++ b/e01_strings/strings.cpp
@@ -1,3 +1,4 @@
+typedef struct IUnknown IUnknown;
 // clang-format off
 #include <windows.h>
 #include <tlhelp32.h>
@@ -6,6 +7,8 @@
 #include <filesystem>
 #include <iostream>
 #include <utility>
+#include <string>
+#include <sstream>
 
 // Written by cristeigabriel by the process of reverse engineering the program,
 // then making some changes in parts where I believe that's the right approach.
@@ -35,8 +38,6 @@ static HMODULE getLibrary(LPCWSTR library) {
 
 static BOOL isWow64Process() {
   BOOL wow64Process = FALSE;
-  USHORT processMachine;
-  USHORT nativeMachine;
 
   HMODULE kernel32 = getLibrary(L"kernel32");
   if (nullptr == kernel32) {
@@ -46,19 +47,9 @@ static BOOL isWow64Process() {
 
   HANDLE currentProcess = GetCurrentProcess();
 
-  decltype(IsWow64Process2) *isWow64Process2Fn =
-      (decltype(IsWow64Process2) *)GetProcAddress(kernel32, "IsWow64Process2");
-  if (isWow64Process2Fn)
-    wow64Process = (BOOL)(isWow64Process2Fn(currentProcess, &processMachine,
-                                            &nativeMachine) &&
-                          (processMachine != 0));
-  else {
-    decltype(IsWow64Process) *isWow64ProcessFn =
-        (decltype(IsWow64Process) *)GetProcAddress(kernel32, "IsWow64Process");
-    if (isWow64ProcessFn) isWow64ProcessFn(currentProcess, &wow64Process);
-  }
-
-  (void)nativeMachine;
+	decltype(IsWow64Process) *isWow64ProcessFn =
+			(decltype(IsWow64Process) *)GetProcAddress(kernel32, "IsWow64Process");
+	if (isWow64ProcessFn) isWow64ProcessFn(currentProcess, &wow64Process);
 
   return wow64Process;
 }
@@ -159,18 +150,21 @@ static void processFile(const std::filesystem::path &path,
       //    (as you may see, it uses isprint on the lower part of the wchar)
       //    if it doesn't do that, then it'll print a lot of trash
 
-      auto printBuffer = [&]<typename T>(T str) {
+      auto printBuffer = [&](void* str, bool wide) {
         std::ptrdiff_t offset = pagesSize * pageNumber;
-        if constexpr (std::is_same_v<T, LPSTR>)
-          offset += asciiStringStart;
-        else
+        if (wide)
           offset += wideStringStart;
+        else
+          offset += asciiStringStart;
         std::wstringstream ss;
         if (s_goingThroughDirectory) ss << path << L": ";
         if (arguments.m_printOffset)
           ss << std::hex << std::setw(8) << std::setfill(L'0') << offset
              << std::flush << L": ";
-        ss << str << L'\n';
+        if (wide)
+          ss << (LPWSTR)str << L'\n';
+        else
+          ss << (LPSTR)str << L'\n';
         std::wcout << ss.str();
       };
 
@@ -195,7 +189,7 @@ static void processFile(const std::filesystem::path &path,
             // add null terminator
             auxBuffer[length] = 0;
 
-            printBuffer(auxBuffer);
+            printBuffer(auxBuffer, true);
             LocalFree(auxBuffer);
 
             // notify app there's at least one string
@@ -223,7 +217,7 @@ static void processFile(const std::filesystem::path &path,
             // add null terminator
             auxBuffer[length] = 0;
 
-            printBuffer(auxBuffer);
+            printBuffer(auxBuffer, false);
             LocalFree(auxBuffer);
 
             // notify app there's at least one string
@@ -247,8 +241,9 @@ static void processFile(const std::filesystem::path &path,
   CloseHandle(file);
 }
 
+template <typename T>
 static void forEachEntry(const std::filesystem::path &path, bool recursive,
-                         auto &&fn) {
+                         T &&fn) {
   if (recursive) {
     for (const auto &entry :
          std::filesystem::recursive_directory_iterator(path))
@@ -281,13 +276,14 @@ static void processInput(const std::filesystem::path &path,
 }
 
 int wmain(int argc, wchar_t **argv) {
-  Arguments arguments = {.m_minimumStringLength = 5,
-                         .m_fileOffset = 0,
-                         .m_bytesToScan = 0,
-                         .m_searchAscii = true,
-                         .m_searchWide = true,
-                         .m_printOffset = true,
-                         .m_recursiveSubdirectories = true};
+  Arguments arguments;
+  arguments.m_minimumStringLength = 5;
+  arguments.m_fileOffset = 0;
+  arguments.m_bytesToScan = 0;
+  arguments.m_searchAscii = true;
+  arguments.m_searchWide = true;
+  arguments.m_printOffset = true;
+  arguments.m_recursiveSubdirectories = true;
 
   // todo: parse above from command line
 
@@ -300,4 +296,4 @@ int wmain(int argc, wchar_t **argv) {
     std::wcout << L"Could not find any string in " << path << std::endl;
 
   return 1;
-}
+}
\ No newline at end of file
